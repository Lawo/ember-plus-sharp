<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Performance Comparison</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="2733eaf4-84f9-496d-afa2-bd6d3ab0f291" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Ember+ Sharp Project Documentation v1.2.1603.17002<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="046877b5-3e57-48ca-8868-7885de0e3842.htm" title="Ember+ Sharp Project Documentation v1.2.1603.17002" tocid="roottoc">Ember+ Sharp Project Documentation v1.2.1603.17002</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="915a270d-2a20-432f-9531-ce6aa3260566.htm" title="Ember+ Sharp Library" tocid="915a270d-2a20-432f-9531-ce6aa3260566">Ember+ Sharp Library</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c17ed1f5-6b3d-40f5-af29-b1d031ae24cd.htm" title="Rationale" tocid="c17ed1f5-6b3d-40f5-af29-b1d031ae24cd">Rationale</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="2733eaf4-84f9-496d-afa2-bd6d3ab0f291.htm" title="Performance Comparison" tocid="2733eaf4-84f9-496d-afa2-bd6d3ab0f291">Performance Comparison</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Performance Comparison</td><td class="logoColumn"><img src="../icons/Help.png" /></td></tr></table><span class="introStyle"></span><div class="introduction"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span>
<span class="highlight-comment">// &lt;copyright&gt;Copyright 2012-2016 Lawo AG (http://www.lawo.com).&lt;/copyright&gt;</span>
<span class="highlight-comment">// Distributed under the Boost Software License, Version 1.0.</span>
<span class="highlight-comment">// (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span>
<span class="highlight-comment">////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span>

<span class="highlight-keyword">namespace</span> Lawo.EmberPlusSharp.S101
{
    <span class="highlight-keyword">using</span> System;
    <span class="highlight-keyword">using</span> System.Diagnostics;
    <span class="highlight-keyword">using</span> System.Diagnostics.CodeAnalysis;
    <span class="highlight-keyword">using</span> System.IO;
    <span class="highlight-keyword">using</span> System.Threading;
    <span class="highlight-keyword">using</span> System.Threading.Tasks;

    <span class="highlight-keyword">using</span> EmberLib.Glow.Framing;
    <span class="highlight-keyword">using</span> IO;
    <span class="highlight-keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;
    <span class="highlight-keyword">using</span> Threading.Tasks;

    <span class="highlight-comment">/// &lt;summary&gt;Compares the performance of this implementation with the one of EmberLib.net.&lt;/summary&gt;</span>
    [TestClass]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> PerformanceComparison : CommunicationTestBase
    {
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> BlockSize = <span class="highlight-number">4096</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> BlockCount = <span class="highlight-number">4096</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> LoopCount = <span class="highlight-number">3</span>;

        <span class="highlight-comment">////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span>

        <span class="highlight-comment">/// &lt;summary&gt;Measures &lt;see cref="S101Reader"/&gt; asynchronous performance.&lt;/summary&gt;</span>
        [SuppressMessage(<span class="highlight-literal">"Microsoft.Globalization"</span>, <span class="highlight-literal">"CA1303:Do not pass literals as localized parameters"</span>, Justification = <span class="highlight-literal">"Will not be localized."</span>)]
        [SuppressMessage(<span class="highlight-literal">"Microsoft.Naming"</span>, <span class="highlight-literal">"CA2204:Literals should be spelled correctly"</span>, Justification = <span class="highlight-literal">"Text references code elements."</span>)]
        [TestMethod]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> S101ReadTest()
        {
            AsyncPump.Run(
                <span class="highlight-keyword">async</span> () =&gt;
                {
                    <span class="highlight-keyword">byte</span>[] input;

                    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> stream = <span class="highlight-keyword">new</span> MemoryStream())
                    {
                        <span class="highlight-keyword">var</span> writer = <span class="highlight-keyword">new</span> S101Writer((WriteAsyncCallback)stream.WriteAsync, <span class="highlight-number">1024</span>);

                        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> payloadStream = <span class="highlight-keyword">await</span> writer.WriteMessageAsync(EmberDataMessage, CancellationToken.None))
                        {
                            <span class="highlight-keyword">var</span> payload = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[BlockSize];
                            <span class="highlight-keyword">this</span>.Random.NextBytes(payload);
                            <span class="highlight-keyword">await</span> payloadStream.WriteAsync(payload, <span class="highlight-number">0</span>, payload.Length);
                            <span class="highlight-keyword">await</span> payloadStream.DisposeAsync(CancellationToken.None);
                        }

                        <span class="highlight-keyword">await</span> writer.DisposeAsync(CancellationToken.None);
                        input = stream.ToArray();
                    }

                    Console.WriteLine(
                        <span class="highlight-literal">"S101Reader asynchronous: {0}ms"</span>,
                        <span class="highlight-keyword">await</span> TimeMethod(count =&gt; TestS101ReaderAsync(input, count), LoopCount));
                });
        }

        <span class="highlight-comment">/// &lt;summary&gt;Compares &lt;see cref="S101Writer"/&gt; performance with &lt;see cref="GlowOutput"/&gt; performance.&lt;/summary&gt;</span>
        <span class="highlight-comment">/// &lt;remarks&gt;For both classes conditions are exactly the same:</span>
        <span class="highlight-comment">/// &lt;list type="bullet"&gt;</span>
        <span class="highlight-comment">/// &lt;item&gt;The input consists of a block of &lt;see cref="BlockSize"/&gt; random bytes written &lt;see cref="BlockCount"/&gt;</span>
        <span class="highlight-comment">/// times.&lt;/item&gt;</span>
        <span class="highlight-comment">/// &lt;item&gt;The output is simply ignored.&lt;/item&gt;</span>
        <span class="highlight-comment">/// &lt;/list&gt;</span>
        <span class="highlight-comment">/// These conditions ensure that most memory accesses can be satisfied by the cache (i.e. memory bandwidth</span>
        <span class="highlight-comment">/// should not be a limiting factor) and that the time to write the output can be ignored.&lt;/remarks&gt;</span>
        [SuppressMessage(<span class="highlight-literal">"Microsoft.Globalization"</span>, <span class="highlight-literal">"CA1303:Do not pass literals as localized parameters"</span>, Justification = <span class="highlight-literal">"Will not be localized."</span>)]
        [SuppressMessage(<span class="highlight-literal">"Microsoft.Naming"</span>, <span class="highlight-literal">"CA2204:Literals should be spelled correctly"</span>, Justification = <span class="highlight-literal">"Text references code elements."</span>)]
        [TestMethod]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> S101WriteTest()
        {
            AsyncPump.Run(
                <span class="highlight-keyword">async</span> () =&gt;
                {
                    <span class="highlight-keyword">var</span> input = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[BlockSize];
                    <span class="highlight-keyword">this</span>.Random.NextBytes(input);
                    <span class="highlight-keyword">var</span> glowOutputMilliseconds = <span class="highlight-keyword">await</span> TimeMethod(count =&gt; TestGlowOutput(input, count), LoopCount);
                    <span class="highlight-keyword">var</span> s101WriterAsyncMilliseconds = <span class="highlight-keyword">await</span> TimeMethod(count =&gt; TestS101WriterAsync(input, count), LoopCount);

                    Console.WriteLine(<span class="highlight-literal">"GlowOutput: {0}ms"</span>, glowOutputMilliseconds);
                    Console.WriteLine(<span class="highlight-literal">"S101Writer asynchronous: {0}ms"</span>, s101WriterAsyncMilliseconds);
                    Console.WriteLine(<span class="highlight-literal">"Ratio: {0}"</span>, (<span class="highlight-keyword">double</span>)glowOutputMilliseconds / s101WriterAsyncMilliseconds);
                });
        }

        <span class="highlight-comment">////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span>

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">async</span> Task TestS101ReaderAsync(<span class="highlight-keyword">byte</span>[] message, <span class="highlight-keyword">int</span> messageCount)
        {
            <span class="highlight-keyword">byte</span>[] buffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[BlockSize];

            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> stream = <span class="highlight-keyword">new</span> MemoryStream(message))
            {
                <span class="highlight-keyword">var</span> reader = <span class="highlight-keyword">new</span> S101Reader((ReadAsyncCallback)stream.ReadAsync, <span class="highlight-number">1024</span>);

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> index = <span class="highlight-number">0</span>; index &lt; messageCount; ++index)
                {
                    <span class="highlight-keyword">await</span> reader.ReadAsync(CancellationToken.None);

                    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> payload = reader.Payload)
                    {
                        <span class="highlight-keyword">await</span> payload.ReadAsync(buffer, <span class="highlight-number">0</span>, buffer.Length);
                        <span class="highlight-keyword">await</span> payload.DisposeAsync(CancellationToken.None);
                    }

                    stream.Position = <span class="highlight-number">0</span>;
                }

                <span class="highlight-keyword">await</span> reader.DisposeAsync(CancellationToken.None);
            }
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Task TestGlowOutput(<span class="highlight-keyword">byte</span>[] block, <span class="highlight-keyword">int</span> blockCount)
        {
            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> output = <span class="highlight-keyword">new</span> GlowOutput(<span class="highlight-number">1024</span>, <span class="highlight-number">0</span>, (s, e) =&gt; { }))
            {
                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> index = <span class="highlight-number">0</span>; index &lt; blockCount; ++index)
                {
                    output.WriteBytes(block);
                }

                output.Finish();
            }

            <span class="highlight-keyword">return</span> Task.FromResult(<span class="highlight-keyword">false</span>);
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">async</span> Task TestS101WriterAsync(<span class="highlight-keyword">byte</span>[] block, <span class="highlight-keyword">int</span> blockCount)
        {
            <span class="highlight-keyword">var</span> completed = Task.FromResult(<span class="highlight-keyword">false</span>);
            <span class="highlight-keyword">var</span> writer = <span class="highlight-keyword">new</span> S101Writer((WriteAsyncCallback)((b, o, c, t) =&gt; completed), <span class="highlight-number">1024</span>);

            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> payloadStream = <span class="highlight-keyword">await</span> writer.WriteMessageAsync(EmberDataMessage, CancellationToken.None))
            {
                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> index = <span class="highlight-number">0</span>; index &lt; blockCount; ++index)
                {
                    <span class="highlight-keyword">await</span> payloadStream.WriteAsync(block, <span class="highlight-number">0</span>, block.Length);
                }

                <span class="highlight-keyword">await</span> payloadStream.DisposeAsync(CancellationToken.None);
            }

            <span class="highlight-keyword">await</span> writer.DisposeAsync(CancellationToken.None);
        }

        [SuppressMessage(<span class="highlight-literal">"Microsoft.Reliability"</span>, <span class="highlight-literal">"CA2001:AvoidCallingProblematicMethods"</span>, MessageId = <span class="highlight-literal">"System.GC.Collect"</span>, Justification = <span class="highlight-literal">"Necessary for performance testing."</span>)]
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">async</span> Task&lt;<span class="highlight-keyword">long</span>&gt; TimeMethod(Func&lt;<span class="highlight-keyword">int</span>, Task&gt; method, <span class="highlight-keyword">int</span> loopCount)
        {
            <span class="highlight-keyword">await</span> method(<span class="highlight-number">1</span>); <span class="highlight-comment">// Make sure everything is JITed</span>
            <span class="highlight-keyword">var</span> stopwatch = <span class="highlight-keyword">new</span> Stopwatch();

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">var</span> current = <span class="highlight-number">0</span>; current &lt; loopCount; ++current)
            {
                GC.Collect();
                stopwatch.Start();
                <span class="highlight-keyword">await</span> method(BlockCount);
                GC.Collect(); <span class="highlight-comment">// Make sure that the impact of all allocations is measured.</span>
                stopwatch.Stop();
            }

            <span class="highlight-keyword">return</span> stopwatch.ElapsedMilliseconds / loopCount;
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABAAA");</script></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://www.boost.org/LICENSE_1_0.txt" target="_blank">Copyright 2012-2016 Lawo AG. Distributed under the Boost Software License, Version 1.0.</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:andreas.huber%40lawo.com?Subject=Ember+ Sharp Project Documentation v1.2.1603.17002">Andreas Huber</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>