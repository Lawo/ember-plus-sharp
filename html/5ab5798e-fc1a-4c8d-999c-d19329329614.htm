<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Binding to Model Data</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="5ab5798e-fc1a-4c8d-999c-d19329329614" /><meta name="Description" content="Without library support, binding the value of a C# source property to the value of a C# target property is rather tedious and error-prone. This is due to the fact that implementations of T:System.ComponentModel." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Ember+ Sharp Project Documentation v1.2.1603.17002<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="046877b5-3e57-48ca-8868-7885de0e3842.htm" title="Ember+ Sharp Project Documentation v1.2.1603.17002" tocid="roottoc">Ember+ Sharp Project Documentation v1.2.1603.17002</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="915a270d-2a20-432f-9531-ce6aa3260566.htm" title="Ember+ Sharp Library" tocid="915a270d-2a20-432f-9531-ce6aa3260566">Ember+ Sharp Library</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="fa86e52c-0fb0-4acb-9b55-fb689eb5f17c.htm" title="Lawo.ComponentModel Namespace Tutorial" tocid="fa86e52c-0fb0-4acb-9b55-fb689eb5f17c">Lawo.ComponentModel Namespace Tutorial</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d640f3f7-b516-4428-8ceb-d7a9a703babd.htm" title="Example" tocid="d640f3f7-b516-4428-8ceb-d7a9a703babd">Example</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="a8575c94-9500-4717-b35b-cd2f5eff1a4e.htm" title="ViewModel" tocid="a8575c94-9500-4717-b35b-cd2f5eff1a4e">ViewModel</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="48ea11d2-ae3a-4fb7-9baf-1612d57d3f97.htm" title="Members" tocid="48ea11d2-ae3a-4fb7-9baf-1612d57d3f97">Members</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="76a6666d-9320-449b-8b85-1efbf4df4709.htm" title="Change Notification" tocid="76a6666d-9320-449b-8b85-1efbf4df4709">Change Notification</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="5ab5798e-fc1a-4c8d-999c-d19329329614.htm" title="Binding to Model Data" tocid="5ab5798e-fc1a-4c8d-999c-d19329329614">Binding to Model Data</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Binding to Model Data</td><td class="logoColumn"><img src="../icons/Help.png" /></td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        Without library support, binding the value of a <strong>C#</strong> source property to the value of a
        <strong>C#</strong> target property is rather tedious and error-prone. This is due to the fact that
        implementations of <a href="http://msdn2.microsoft.com/en-us/library/ms133020" target="_blank">INotifyPropertyChanged</a>
        signal a property change by calling the subscribed handler with the property name as a string. The handler then
        needs to compare the passed string to find out exactly which property has been changed. The
        <a href="B49A12AF.htm">Lawo.ComponentModel</a> and
        <a href="8381C488.htm">Lawo.Reflection</a> namespaces offer a few tools to make this
        process much easier.
      </p><p>Bindings are typically created in the <strong>ViewModel</strong> constructor.</p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
          All the binding methods discussed below return an object that represents the newly created binding. The
          binding can be broken by calling <a href="http://msdn2.microsoft.com/en-us/library/es4s3w1d" target="_blank">Dispose<span id="LSTA2975C50_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA2975C50_0?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>. In
          many cases however, it is sensible to never explicitly remove a binding.
        </p></td></tr></table></div><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#TwoWayBinding">Two-Way Binding</a></li><li class="outlineSectionEntry"><a href="#OneWayBinding">One-Way Binding</a></li><li class="outlineSectionEntry"><a href="#MultiBinding">Multi-Binding</a></li><li class="outlineSectionEntry"><a href="#CalculatedProperty">Calculated Property</a></li></ul></div><div class="collapsibleAreaRegion" id="TwoWayBinding"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Two-Way Binding</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">TwoWayBinding.Create(
    <span class="highlight-keyword">this</span>.settings.GetProperty(o =&gt; o.ListeningPort), <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.ListeningPort));
TwoWayBinding.Create(
    <span class="highlight-keyword">this</span>.settings.GetProperty(o =&gt; o.ProviderHostName), <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.ProviderHostName));
TwoWayBinding.Create(
    <span class="highlight-keyword">this</span>.settings.GetProperty(o =&gt; o.ProviderPort), <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.ProviderPort));
TwoWayBinding.Create(
    <span class="highlight-keyword">this</span>.settings.GetProperty(o =&gt; o.LogFolder), <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.LogFolder));
TwoWayBinding.Create(
    <span class="highlight-keyword">this</span>.settings.GetProperty(o =&gt; o.AutoScrollToMostRecentEvent),
    a =&gt; a,
    <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.AutoScrollToMostRecentEvent),
    a =&gt; a.GetValueOrDefault());</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAEAAA");</script><p><a href="3FC67237.htm">TwoWayBinding</a> can be used to simply "forward"
          a property from the <strong>Model</strong> to the <strong>ViewModel</strong> and vice
          versa. Overloads that accept conversion functions can be used to convert between properties of differing
          types.
        </p></div><div class="collapsibleAreaRegion" id="OneWayBinding"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />One-Way Binding</span></div><div id="ID2RBSection" class="collapsibleSection"><p><a href="AE7F434C.htm">OneWayBinding</a> can be used if changes only
          need to be propagated from the <strong>Model</strong> to the <strong>ViewModel</strong>
          but not the other way round. <strong>ViewModel</strong> properties bound in such a way are typically
          read-only for the <strong>View</strong>.
        </p></div><div class="collapsibleAreaRegion" id="MultiBinding"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Multi-Binding</span></div><div id="ID3RBSection" class="collapsibleSection"><p><a href="F8207003.htm">MultiBinding</a> can be used if the value of a
          <strong>ViewModel</strong> property depends on multiple other properties.
        </p></div><div class="collapsibleAreaRegion" id="CalculatedProperty"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Calculated Property</span></div><div id="ID4RBSection" class="collapsibleSection"><p><a href="F7D595FB.htm">CalculatedProperty</a> offers a slightly easier
          way than <a href="#MultiBinding">MultiBinding</a> to implement a
          <strong>ViewModel</strong> property that depends on multiple other properties. The differences are:
        </p><ul><li><p><a href="F8207003.htm">MultiBinding</a> can bind between
              any source and target properties as long as all owners of source properties implement
              <a href="http://msdn2.microsoft.com/en-us/library/ms133020" target="_blank">INotifyPropertyChanged</a>.
              <a href="F7D595FB.htm">CalculatedProperty</a> additionally requires
              that the owner of the target property derives from
              <a href="C2857D6D.htm">NotifyPropertyChanged</a>.
            </p></li><li><p><a href="F8207003.htm">MultiBinding</a> requires a target property
              with a getter and a setter. With
              <a href="F7D595FB.htm">CalculatedProperty</a> only the getter needs
              to implemented.
            </p></li></ul><p>
          To implement a calculated property in <span class="code">MainWindowViewModel</span>, firstly we need a field:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAGABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAGABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAGABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAGABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> CalculatedProperty&lt;<span class="highlight-keyword">bool</span>&gt; canStart;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAGABAAA");</script><p>
          Secondly, the field needs to be assigned an appropriately initialized instance:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">this</span>.canStart = CalculatedProperty.Create(
    <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.IsStarted),
    <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.IsStopped),
    <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.ListeningPort),
    <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.ProviderPort),
    <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.LogFolder),
    (isStarted, isStopped, lp, pp, lf) =&gt; !isStarted &amp;&amp; isStopped &amp;&amp; <span class="highlight-keyword">string</span>.IsNullOrEmpty(ValidatePort(lp) + ValidatePort(pp) + ValidateFolder(lf)),
    <span class="highlight-keyword">this</span>.GetProperty(o =&gt; o.CanStart));</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEABAAA");</script><p>
          The first 5 arguments represent the source properties that the calculated property is derived from. The next
          argument calculates the value of the target property from the values of the source properties. The last
          argument represents the target property.
        </p><p>The implementation of the actual property looks as follows:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> CanStart
{
    <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-keyword">this</span>.canStart.Value; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABABAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Caution note" /> Caution</th></tr><tr><td><p>
            By design, the
            <a href="93FBCA8.htm">NotifyPropertyChanged<span id="LSTA2975C50_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA2975C50_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>PropertyChanged</a>
            event occurs before the
            <a href="691BC8AE.htm">CalculatedProperty<span id="LSTA2975C50_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA2975C50_2?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTA2975C50_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA2975C50_3?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> instance can be
            assigned to the field.
          </p><p>
            Therefore, if an event handler is already subscribed to
            <a href="93FBCA8.htm">PropertyChanged</a>
            while a <a href="691BC8AE.htm">CalculatedProperty<span id="LSTA2975C50_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA2975C50_4?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTA2975C50_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA2975C50_5?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> instance is
            created, the event handler will provoke a
            <a href="http://msdn2.microsoft.com/en-us/library/8w0s4024" target="_blank">NullReferenceException</a> if it attempts to call the
            getter of the calculated property.
          </p><p>
            This problem can easily be avoided by only ever calling
            <a href="FD188AF3.htm">CalculatedProperty<span id="LSTA2975C50_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA2975C50_6?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Create</a>
            inside a constructor and immediately assigning the resulting instance to a <span class="code">private
            readonly</span> field. In scenarios where this is not possible,
            <a href="F8207003.htm">MultiBinding</a> should be used instead.
          </p></td></tr></table></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://www.boost.org/LICENSE_1_0.txt" target="_blank">Copyright 2012-2016 Lawo AG. Distributed under the Boost Software License, Version 1.0.</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:andreas.huber%40lawo.com?Subject=Ember+ Sharp Project Documentation v1.2.1603.17002">Andreas Huber</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>