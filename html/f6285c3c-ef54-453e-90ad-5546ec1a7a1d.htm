<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Page 4: Create a Local Copy of the Provider Database</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="f6285c3c-ef54-453e-90ad-5546ec1a7a1d" /><meta name="Description" content="See ." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Ember+ Sharp Project Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="046877b5-3e57-48ca-8868-7885de0e3842.htm" title="Ember+ Sharp Project Documentation" tocid="roottoc">Ember+ Sharp Project Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="427fadff-8d32-472e-83d1-3ceaf705ae51.htm" title="Lawo.EmberPlus.Model Namespace Tutorial" tocid="427fadff-8d32-472e-83d1-3ceaf705ae51">Lawo.EmberPlus.Model Namespace Tutorial</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c319e2c2-fa9a-4ad5-bc4f-74a85a91eb78.htm" title="Page 3: Dynamic Interface" tocid="c319e2c2-fa9a-4ad5-bc4f-74a85a91eb78">Page 3: Dynamic Interface</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="f6285c3c-ef54-453e-90ad-5546ec1a7a1d.htm" title="Page 4: Create a Local Copy of the Provider Database" tocid="f6285c3c-ef54-453e-90ad-5546ec1a7a1d">Page 4: Create a Local Copy of the Provider Database</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="e0972d29-96f3-4dea-936b-f77001d077b1.htm" title="Page 5: Iterate over the Local Database" tocid="e0972d29-96f3-4dea-936b-f77001d077b1">Page 5: Iterate over the Local Database</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7cdb703a-14dd-42d3-8ea2-28a9b8af6663.htm" title="Page 6: React to Changes" tocid="7cdb703a-14dd-42d3-8ea2-28a9b8af6663">Page 6: React to Changes</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="84d499e7-ec08-4311-8038-987c167eaa43.htm" title="Page 7: Send Local Changes to the Provider" tocid="84d499e7-ec08-4311-8038-987c167eaa43">Page 7: Send Local Changes to the Provider</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="df1c42d3-bc00-4786-88d6-2372b281043a.htm" title="Page 8: Handle Communication Errors" tocid="df1c42d3-bc00-4786-88d6-2372b281043a">Page 8: Handle Communication Errors</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn">Page 4: Create a Local Copy of the Provider Database</td></tr></table><span class="introStyle"></span><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[This is preliminary documentation and is subject to change.]</p><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#RunTinyEmber">Run Tiny Ember+</a></li><li class="outlineSectionEntry"><a href="#CreateTheProject">Create the Project</a></li><li class="outlineSectionEntry"><a href="#UsingDeclarations">Using Declarations</a></li><li class="outlineSectionEntry"><a href="#TcpConnectionAndS101">TCP Connection and S101</a></li><li class="outlineSectionEntry"><a href="#RootClass">Root Class</a></li><li class="outlineSectionEntry"><a href="#MainMethod">Main Method</a></li></ul></div><div class="collapsibleAreaRegion" id="RunTinyEmber"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Run Tiny Ember+</span></div><div id="ID0RBSection" class="collapsibleSection"><p>See <a href="5b9afbff-f6fc-4870-892f-6d6b76f85c67.htm#TinyEmber">Page 1: Prerequisites</a>.</p></div><div class="collapsibleAreaRegion" id="CreateTheProject"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Create the Project</span></div><div id="ID1RBSection" class="collapsibleSection"><ol><li><p>Start <strong>Visual Studio 2015</strong>.</p></li><li><p>
              Create a new <strong>Console Application</strong> project that uses the <strong>.NET
              Framework 4.5</strong>.
            </p></li><li><p>
              Add references to <strong>Lawo</strong> and <strong>Lawo.EmberPlus</strong>, see
              <a href="5b9afbff-f6fc-4870-892f-6d6b76f85c67.htm#Assemblies">Page 1: Prerequisites</a>.
            </p></li></ol></div><div class="collapsibleAreaRegion" id="UsingDeclarations"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Using Declarations</span></div><div id="ID3RBSection" class="collapsibleSection"><p>Replace the default using declarations with the following:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID2EAAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID2EAAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID2EAAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID2EAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Linq;
<span class="highlight-keyword">using</span> System.Net.Sockets;
<span class="highlight-keyword">using</span> System.Threading.Tasks;
<span class="highlight-keyword">using</span> Lawo.EmberPlus.Model;
<span class="highlight-keyword">using</span> Lawo.EmberPlus.S101;
<span class="highlight-keyword">using</span> Lawo.Threading.Tasks;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID2EAAAEAAA");</script></div><div class="collapsibleAreaRegion" id="TcpConnectionAndS101"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />TCP Connection and S101</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          Before we can query the provider we first need to create a connection and then establish the S101 protocol.
          Since these first steps will be mostly the same whenever we'd like to connect to a provider, we'll put them
          into a handy method:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID2EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID2EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID2EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID2EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">async</span> Task&lt;S101Client&gt; ConnectAsync(<span class="highlight-keyword">string</span> host, <span class="highlight-keyword">int</span> port)
{
    <span class="highlight-comment">// Create TCP connection</span>
    <span class="highlight-keyword">var</span> tcpClient = <span class="highlight-keyword">new</span> TcpClient();
    <span class="highlight-keyword">await</span> tcpClient.ConnectAsync(host, port);

    <span class="highlight-comment">// Establish S101 protocol</span>
    <span class="highlight-comment">// S101 provides message packaging, CRC integrity checks and a keep-alive mechanism.</span>
    <span class="highlight-keyword">var</span> stream = tcpClient.GetStream();
    <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> S101Client(tcpClient, stream.ReadAsync, stream.WriteAsync);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID2EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="RootClass"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Root Class</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
          Next, we need to create a new nested class, an object of which will henceforth represent the root of our local
          copy of the provider database.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID2EABACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID2EABACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID2EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID2EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Note that the most-derived subtype MyRoot needs to be passed to the generic base class.</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">sealed</span> <span class="highlight-keyword">class</span> MyRoot : DynamicRoot&lt;MyRoot&gt;
{
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID2EABACAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            The library requires the creation of such a class for the fully dynamic use case although it isn't
            technically necessary. We will go into the rationale for this later.
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="MainMethod"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Main Method</span></div><div id="ID6RBSection" class="collapsibleSection"><p>
          We can now connect to any provider with the following code:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID2EACABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID2EACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID2EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID2EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
{
    <span class="highlight-comment">// This is necessary so that we can execute async code in a console application.</span>
    AsyncPump.Run(
        <span class="highlight-keyword">async</span> () =&gt;
        {
            <span class="highlight-comment">// Establish S101 protocol</span>
            <span class="highlight-keyword">using</span> (S101Client client = <span class="highlight-keyword">await</span> ConnectAsync(<span class="highlight-literal">"localhost"</span>, <span class="highlight-number">9000</span>))

            <span class="highlight-comment">// Query the provider database for *all* elements and store them in a local copy</span>
            <span class="highlight-keyword">using</span> (Consumer&lt;MyRoot&gt; consumer = <span class="highlight-keyword">await</span> Consumer&lt;MyRoot&gt;.CreateAsync(client))
            {
                <span class="highlight-comment">// Get the root of the local database.</span>
                INode root = consumer.Root;

                <span class="highlight-comment">// For now just output the number of direct children under the root node.</span>
                Console.WriteLine(root.Children.Count);
            }
        });
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID2EACABAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            The call to
            <a href="B5A149C5.htm">AsyncPump<span id="LST54BAAF80_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST54BAAF80_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Run(Func<span id="LST54BAAF80_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST54BAAF80_1?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Task<span id="LST54BAAF80_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST54BAAF80_2?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a>
            is only necessary because there is no direct support for <span class="code">async</span> methods in a
            <strong>Console Application</strong>. In GUI applications (e.g. <strong>Windows
            Forms</strong>, <strong>WPF</strong>, <strong>Windows Store</strong>) the
            <span class="code">async</span> methods are typically called directly from an
            <span class="code">async void</span> event handler.
          </p></td></tr></table></div><p>Proceed to <a href="e0972d29-96f3-4dea-936b-f77001d077b1.htm">Page 5: Iterate over the Local Database</a>.</p></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://www.lawo.com" target="_blank">Copyright 2012-2015 Lawo AG. All rights reserved.</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:andreas.huber%40lawo.com?Subject=Ember+ Sharp Project Documentation">Andreas Huber</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>