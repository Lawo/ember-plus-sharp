<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Lawo.EmberPlusSharp.S101 Namespace Tutorial</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="aad74cef-7ff7-47c7-9086-76d8c3d9415c" /><meta name="Description" content="The most frequently used class of this namespace certainly is T:Lawo.EmberPlusSharp.S101.S101Client, the usage of which is demonstrated on ." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Ember+ Sharp Project Documentation v1.3.1701.18004<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="046877b5-3e57-48ca-8868-7885de0e3842.htm" title="Ember+ Sharp Project Documentation v1.3.1701.18004" tocid="roottoc">Ember+ Sharp Project Documentation v1.3.1701.18004</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="915a270d-2a20-432f-9531-ce6aa3260566.htm" title="Ember+ Sharp Library" tocid="915a270d-2a20-432f-9531-ce6aa3260566">Ember+ Sharp Library</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="427fadff-8d32-472e-83d1-3ceaf705ae51.htm" title="Lawo.EmberPlusSharp.Model Namespace Tutorial" tocid="427fadff-8d32-472e-83d1-3ceaf705ae51">Lawo.EmberPlusSharp.Model Namespace Tutorial</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="57f78c21-7c7b-4c7f-9035-70774e053625.htm" title="Lawo.EmberPlusSharp.Ember Namespace Tutorial" tocid="57f78c21-7c7b-4c7f-9035-70774e053625">Lawo.EmberPlusSharp.Ember Namespace Tutorial</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="aad74cef-7ff7-47c7-9086-76d8c3d9415c.htm" title="Lawo.EmberPlusSharp.S101 Namespace Tutorial" tocid="aad74cef-7ff7-47c7-9086-76d8c3d9415c">Lawo.EmberPlusSharp.S101 Namespace Tutorial</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="fa86e52c-0fb0-4acb-9b55-fb689eb5f17c.htm" title="Lawo.ComponentModel Namespace Tutorial" tocid="fa86e52c-0fb0-4acb-9b55-fb689eb5f17c">Lawo.ComponentModel Namespace Tutorial</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="5EF7F8A.htm" title="Reference" tocid="5EF7F8A">Reference</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c17ed1f5-6b3d-40f5-af29-b1d031ae24cd.htm" title="Rationale" tocid="c17ed1f5-6b3d-40f5-af29-b1d031ae24cd">Rationale</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Lawo.EmberPlusSharp.S101 Namespace Tutorial</td><td class="logoColumn"><img src="../icons/Help.png" /></td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        The most frequently used class of this namespace certainly is
        <a href="9F3D3A83.htm">S101Client</a>, the usage of which is
        demonstrated on <a href="f6285c3c-ef54-453e-90ad-5546ec1a7a1d.htm#TcpConnectionAndS101">Page 4: Create a Local Copy of the Provider Database</a>.
      </p><p>
        The other types in this namespace offer lower level abstractions like S101 messages
        (<a href="68419A19.htm">S101Message</a>) plus
        commands (<a href="D40A1754.htm">KeepAliveRequest</a>,
        <a href="32D54549.htm">KeepAliveResponse</a>,
        <a href="C43397CA.htm">EmberData</a>) as well as their encoding
        (<a href="E040F992.htm">S101Writer</a>) and
        decoding (<a href="E7DAAE4F.htm">S101Reader</a>). The usage is
        demonstrated in the following test:
      </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> writtenMessage = <span class="highlight-keyword">new</span> S101Message(<span class="highlight-number">0x00</span>, <span class="highlight-keyword">new</span> EmberData(<span class="highlight-number">0x01</span>, <span class="highlight-number">0x0A</span>, <span class="highlight-number">0x02</span>));
<span class="highlight-keyword">var</span> writtenPayload = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[<span class="highlight-number">8192</span>];
<span class="highlight-keyword">this</span>.Random.NextBytes(writtenPayload);

<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> encodedStream = <span class="highlight-keyword">new</span> MemoryStream())
{
    <span class="highlight-comment">// First we create a writer, which can be used to write multiple messages.</span>
    <span class="highlight-comment">// We specify which methods are used to write encoded output and flush it plus the size the internal</span>
    <span class="highlight-comment">// buffer should have.</span>
    <span class="highlight-keyword">var</span> writer = <span class="highlight-keyword">new</span> S101Writer(encodedStream.WriteAsync);

    <span class="highlight-comment">// Next we write the message. In return we get a Stream object for the payload.</span>
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> payloadStream =
        <span class="highlight-keyword">await</span> writer.WriteMessageAsync(writtenMessage, CancellationToken.None))
    {
        <span class="highlight-comment">// Now we write the payload.</span>
        <span class="highlight-keyword">await</span> payloadStream.WriteAsync(writtenPayload, <span class="highlight-number">0</span>, writtenPayload.Length);
        <span class="highlight-keyword">await</span> payloadStream.DisposeAsync(CancellationToken.None);
    }

    <span class="highlight-keyword">await</span> writer.DisposeAsync(CancellationToken.None);

    <span class="highlight-comment">// Reset the encoded stream to the beginning, so that we can read from it.</span>
    encodedStream.Position = <span class="highlight-number">0</span>;

    <span class="highlight-comment">// First we create a reader, which can be used to read multiple messages.</span>
    <span class="highlight-comment">// We specify which methods are used to read encoded input.</span>
    <span class="highlight-keyword">var</span> reader = <span class="highlight-keyword">new</span> S101Reader(encodedStream.ReadAsync);
    Assert.IsTrue(<span class="highlight-keyword">await</span> reader.ReadAsync(CancellationToken.None)); <span class="highlight-comment">// Read the first message</span>
    <span class="highlight-keyword">var</span> readMessage = reader.Message;

    <span class="highlight-comment">// Assert the written and read messages are equal</span>
    Assert.AreEqual(writtenMessage.Slot, readMessage.Slot);
    Assert.AreEqual(writtenMessage.Command, readMessage.Command);

    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> readPayload = <span class="highlight-keyword">new</span> MemoryStream())
    {
        <span class="highlight-keyword">await</span> reader.Payload.CopyToAsync(readPayload); <span class="highlight-comment">// Copy the payload.</span>
        <span class="highlight-comment">// Assert that there is only one message</span>
        Assert.IsFalse(<span class="highlight-keyword">await</span> reader.ReadAsync(CancellationToken.None));
        CollectionAssert.AreEqual(writtenPayload, readPayload.ToArray());
    }

    <span class="highlight-keyword">await</span> reader.DisposeAsync(CancellationToken.None);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABAAA");</script></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="http://www.boost.org/LICENSE_1_0.txt" target="_blank">Copyright 2012-2016 Lawo AG. Distributed under the Boost Software License, Version 1.0.</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:andreas.huber%40lawo.com?Subject=Ember+ Sharp Project Documentation v1.3.1701.18004">Andreas Huber</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>