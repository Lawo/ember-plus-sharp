<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2012-2017 Lawo AG (http://www.lawo.com). -->
<!-- Distributed under the Boost Software License, Version 1.0. -->
<!-- (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) -->
<topic id="7cdb703a-14dd-42d3-8ea2-28a9b8af6663" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <autoOutline/>
    </introduction>
    <section address="PropertyChanges">
      <title>Property Changes</title>
      <content>
        <para>
          All element interfaces where properties may be changed by the provider
          (<codeEntityReference>T:Lawo.EmberPlusSharp.Model.IElement</codeEntityReference>,
          <codeEntityReference>T:Lawo.EmberPlusSharp.Model.IParameter</codeEntityReference>,
          <codeEntityReference>T:Lawo.EmberPlusSharp.Model.INode</codeEntityReference>) derive from
          <codeEntityReference>T:System.ComponentModel.INotifyPropertyChanged</codeEntityReference>. Their
          <codeEntityReference>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</codeEntityReference>
          event occurs whenever a provider change has been applied.
        </para>
        <para>
          The
          <codeEntityReference>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</codeEntityReference>
          event also occurs when
          <codeEntityReference qualifyHint="true">P:Lawo.EmberPlusSharp.Model.IParameter.Value</codeEntityReference>
          (or one of its strongly typed variants) is modified locally.
        </para>
        <para>
          In a generic application like e.g. a viewer it would be straightforward to subscribe to
          <codeEntityReference>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</codeEntityReference>. In
          the code below however, for demonstration purposes we're going to subscribe to event of a specific parameter.
          As mentioned earlier, the dynamic interface is not very well suited for tasks that make assumptions about the
          contents of the database:
        </para>
        <code source="..\Lawo.EmberPlusSharpTest\Model\TutorialTest.cs" region="Dynamic React to Changes" language="c#"/>
        <para>Specifically, the code above has the following problems:</para>
        <list class="bullet">
          <listItem>
            <para>
              No attempt is made to handle exceptions that might result from incorrect assumptions. Such exceptions
              could be thrown when an expected element is not present (e.g. the parameter is named
              <codeInline>Pos</codeInline> rather than <codeInline>Position</codeInline>), the actual element has a
              different type (e.g. <codeInline>Position</codeInline> is of type
              <codeEntityReference>T:Lawo.EmberPlusSharp.Model.INode</codeEntityReference> rather than
              <codeEntityReference>T:Lawo.EmberPlusSharp.Model.IParameter</codeEntityReference>) or
              <codeInline>Position</codeInline> is really a <codeInline>double</codeInline> rather than a
              <codeInline>long</codeInline>. Robust code would have to handle these exceptions which would make the
              process even more tedious than it already is.
            </para>
          </listItem>
          <listItem>
            <para>
              The interface offers no way of getting an element by name. The code above has to use
              <application>LINQ</application> to search for the desired elements, which is cumbersome and inefficient.
            </para>
          </listItem>
        </list>
        <para>We will see later how the static interface is a much better fit for this scenario.</para>
        <para>
          We can test this by running the above program and then modfiying a value of the parameter in
          <application>Tiny Ember+</application>.
        </para>
      </content>
    </section>
    <section address="CollectionChanges">
      <title>Collection Changes</title>
      <content>
        <para>
          All exposed collections implement the
          <codeEntityReference>T:System.Collections.Specialized.INotifyCollectionChanged</codeEntityReference> interface.
        </para>
        <alert class="note">
          <para>
            Throughout its lifetime, a consumer automatically sends <codeInline>getDirectory</codeInline> commands to
            retrieve children client code has declared interest in. This is done recursively down to leaf elements and
            new nodes are only announced through
            <codeEntityReference>T:System.Collections.Specialized.INotifyCollectionChanged</codeEntityReference>
            once all children (including grandchildren, great-grandchildren, etc.) have been received from the provider.
          </para>
        </alert>
        <para>Proceed to <link xlink:href="84d499e7-ec08-4311-8038-987c167eaa43"/>.</para>
      </content>
    </section>
    <relatedTopics/>
  </developerConceptualDocument>
</topic>
