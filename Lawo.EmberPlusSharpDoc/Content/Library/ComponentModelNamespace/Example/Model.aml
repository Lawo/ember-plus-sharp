<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2012-2017 Lawo AG (http://www.lawo.com). -->
<!-- Distributed under the Boost Software License, Version 1.0. -->
<!-- (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt) -->
<topic id="bbf1edda-4568-4afa-b5c6-27bb3e76aa5e" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <code language="c#">
        internal sealed class Settings : global::System.Configuration.ApplicationSettingsBase
        {
            public static Settings Default { get { ... } }

            public string ProviderHostName { get { ... } set { ... } }

            public string ProviderPort { get { ... } set { ... } }

            public string ListeningPort { get { ... } set { ... } }

            public string LogFolder { get { ... } set { ... } }

            public bool AutoScrollToMostRecentEvent { get { ... } set { ... } }
        }
      </code>
      <para>
        The <application>Model</application> is not particularly interesting, because its only purpose is to handle
        settings persistence. Note that this is not a particularly typical or even exemplary
        <application>Model</application>, see the note at the bottom of the
        <link xlink:href="fa86e52c-0fb0-4acb-9b55-fb689eb5f17c">introduction for this tutorial</link>.
      </para>
    </introduction>
    <section address="ChangeNotification">
      <title>Change Notification</title>
      <content>
        <para>
          Often the <application>ViewModel</application> duplicates at least some information provided by the
          <application>Model</application>, which is why the <application>ViewModel</application> needs to be notified
          when the data in the <application>Model</application> changes.
          <codeEntityReference>T:System.Configuration.ApplicationSettingsBase</codeEntityReference> already implements
          <codeEntityReference>T:System.ComponentModel.INotifyPropertyChanged</codeEntityReference>, so the code
          generated by the application settings designer works just fine for us. A more typical
          <application>Model</application> would simply derive from
          <codeEntityReference>T:Lawo.ComponentModel.NotifyPropertyChanged</codeEntityReference> and implement very
          similar change notification as a <application>ViewModel</application>.
        </para>
      </content>
    </section>
    <relatedTopics/>
  </developerConceptualDocument>
</topic>
